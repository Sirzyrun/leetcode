#### 前言

这道题是博弈问题，猫和老鼠都按照最优策略参与游戏。

在阐述具体解法之前，首先介绍博弈问题中的三个概念：必胜状态、必败状态与必和状态。

1. 对于特定状态，如果游戏已经结束，则根据结束时的状态决定必胜状态、必败状态与必和状态。

   - 如果分出胜负，则该特定状态对于获胜方为必胜状态，对于落败方为必败状态。

   - 如果是平局，则该特定状态对于双方都为必和状态。
2. 从特定状态开始，如果存在一种操作将状态变成必败状态，则当前玩家可以选择该操作，将必败状态留给对方玩家，因此该特定状态对于当前玩家为必胜状态。

3. 从特定状态开始，如果所有操作都会将状态变成必胜状态，则无论当前玩家选择哪种操作，都会将必胜状态留给对方玩家，因此该特定状态对于当前玩家为必败状态。

4. 从特定状态开始，如果任何操作都不能将状态变成必败状态，但是存在一种操作将状态变成必和状态，则当前玩家可以选择该操作，将必和状态留给对方玩家，因此该特定状态对于双方玩家都为必和状态。

对于每个玩家，最优策略如下：

1. 争取将必胜状态留给自己，将必败状态留给对方玩家。

2. 在自己无法到达必胜状态的情况下，争取将必和状态留给自己。

#### 方法一：动态规划

博弈问题通常可以使用动态规划求解。

使用三维数组 $\textit{dp}$ 表示状态，$\textit{dp}[\textit{mouse}][\textit{cat}][\textit{turns}]$ 表示从老鼠位于节点 $\textit{mouse}$、猫位于节点 $\textit{cat}$、游戏已经进行了 $\textit{turns}$ 轮的状态开始，猫和老鼠都按照最优策略的情况下的游戏结果。假设图中的节点数是 $n$，则有 $0 \le \textit{mouse}, \textit{cat} < n$。

由于游戏的初始状态是老鼠位于节点 $1$，猫位于节点 $2$，因此 $\textit{dp}[1][2][0]$ 为从初始状态开始的游戏结果。

动态规划的边界条件为可以直接得到游戏结果的状态，包括以下三种状态：

- 如果 $\textit{mouse} = 0$，老鼠躲入洞里，则老鼠获胜，因此对于任意 $\textit{cat}$ 和 $\textit{turns}$ 都有 $\textit{dp}[0][\textit{cat}][\textit{turns}] = 1$，该状态为老鼠的必胜状态，猫的必败状态。

- 如果 $\textit{cat} = \textit{mouse}$，猫和老鼠占据相同的节点，则猫获胜，因此当 $\textit{cat} = \textit{mouse}$ 时，对于任意 $\textit{mouse}$、$\textit{cat}$ 和 $\textit{turns}$ 都有 $\textit{dp}[\textit{mouse}][\textit{cat}][\textit{turns}] = 2$，该状态为老鼠的必败状态，猫的必胜状态。注意猫不能移动到节点 $0$，因此当 $\textit{mouse} = 0$ 时，一定有 $\textit{cat} \ne \textit{mouse}$。

- 如果 $\textit{turns} \ge 2n$，则是平局，该状态为双方的必和状态。

  > 为什么当 $\textit{turns} \ge 2n$ 时，游戏结果是平局呢？
  >
  > 如果游戏已经进行了 $2n$ 轮，但是仍然没有任何一方获胜，此时猫和老鼠各移动了 $n$ 次，该移动次数等于图中的节点数，因此一定存在一个老鼠到达过至少两次的节点，以及一定存在一个猫到达过至少两次的节点。
  >
  > 对于老鼠而言，即使按照最优策略，也无法躲入洞内，而是只能回到一个已经到达过的节点。当老鼠回到一个在过去的某个回合已经到达过的节点时，猫可能回到在相同回合已经到达过的节点，也可能移动到一个更有利于猫获胜的节点，不可能移动到一个更有利于老鼠获胜的节点（否则猫就不是按照最优策略参与游戏）。如果猫回到在相同回合已经到达过的节点，则形成循环，因此是平局；如果猫移动到一个更有利于猫获胜的节点，则老鼠的获胜机会更小，因此老鼠无法获胜。
  >
  > 同理可知，如果猫按照最优策略也只能回到一个已经到达过的节点，则猫无法获胜。
  >
  > 因此当猫和老鼠分别回到一个已经到达过的节点时，猫和老鼠都无法获胜，游戏结果是平局。

动态规划的状态转移需要考虑当前玩家所有可能的移动，选择最优策略的移动。

由于老鼠先开始移动，猫后开始移动，因此可以根据游戏已经进行的轮数 $\textit{turns}$ 的奇偶性决定当前轮到的玩家，当 $\textit{turns}$ 是偶数时轮到老鼠移动，当 $\textit{turns}$ 是奇数时轮到猫移动。

如果轮到老鼠移动，则对于老鼠从当前节点移动一次之后可能到达的每个节点，进行如下操作：

1. 如果存在一个节点，老鼠到达该节点之后，老鼠可以获胜，则老鼠到达该节点之后的状态为老鼠的必胜状态，猫的必败状态，因此在老鼠移动之前的当前状态为老鼠的必胜状态。

2. 如果老鼠到达任何节点之后的状态都不是老鼠的必胜状态，但是存在一个节点，老鼠到达该节点之后，结果是平局，则老鼠到达该节点之后的状态为双方的必和状态，因此在老鼠移动之前的当前状态为双方的必和状态。

3. 如果老鼠到达任何节点之后的状态都不是老鼠的必胜状态或必和状态，则老鼠到达任何节点之后的状态都为老鼠的必败状态，猫的必胜状态，因此在老鼠移动之前的当前状态为老鼠的必败状态。

如果轮到猫移动，则对于猫从当前节点移动一次之后可能到达的每个节点，进行如下操作：

1. 如果存在一个节点，猫到达该节点之后，猫可以获胜，则猫到达该节点之后的状态为猫的必胜状态，老鼠的必败状态，因此在猫移动之前的当前状态为猫的必胜状态。

2. 如果猫到达任何节点之后的状态都不是猫的必胜状态，但是存在一个节点，猫到达该节点之后，结果是平局，则猫到达该节点之后的状态为双方的必和状态，因此在猫移动之前的当前状态为双方的必和状态。

3. 如果猫到达任何节点之后的状态都不是猫的必胜状态或必和状态，则猫到达任何节点之后的状态都为猫的必败状态，老鼠的必胜状态，因此在猫移动之前的当前状态为猫的必败状态。

实现方面，由于双方移动的策略相似，因此可以使用一个函数实现移动策略，根据游戏已经进行的轮数的奇偶性决定当前轮到的玩家。对于特定玩家的移动，实现方法如下：

1. 如果当前玩家存在一种移动方法到达非必败状态，则用该状态更新游戏结果。

   - 如果该移动方法到达必胜状态，则将当前状态（移动前的状态）设为必胜状态，结束遍历其他可能的移动。

   - 如果该移动方法到达必和状态，则将当前状态（移动前的状态）设为必和状态，继续遍历其他可能的移动，因为可能存在到达必胜状态的移动方法。
2. 如果当前玩家的任何移动方法都到达必败状态，则将当前状态（移动前的状态）设为必败状态。

特别地，如果当前玩家是猫，则不能移动到节点 $0$。

* [sol1-Java]

```Java
class Solution {
    static final int MOUSE_WIN = 1;
    static final int CAT_WIN = 2;
    static final int DRAW = 0;
    int n;
    int[][] graph;
    int[][][] dp;

    public int catMouseGame(int[][] graph) {
        this.n = graph.length;
        this.graph = graph;
        this.dp = new int[n][n][n * 2];
        for (int i = 0; i < n; i++) {
            for (int j = 0; j < n; j++) {
                Arrays.fill(dp[i][j], -1);
            }
        }
        return getResult(1, 2, 0);
    }

    public int getResult(int mouse, int cat, int turns) {
        if (turns == n * 2) {
            return DRAW;
        }
        if (dp[mouse][cat][turns] < 0) {
            if (mouse == 0) {
                dp[mouse][cat][turns] = MOUSE_WIN;
            } else if (cat == mouse) {
                dp[mouse][cat][turns] = CAT_WIN;
            } else {
                getNextResult(mouse, cat, turns);
            }
        }
        return dp[mouse][cat][turns];
    }

    public void getNextResult(int mouse, int cat, int turns) {
        int curMove = turns % 2 == 0 ? mouse : cat;
        int defaultResult = curMove == mouse ? CAT_WIN : MOUSE_WIN;
        int result = defaultResult;
        int[] nextNodes = graph[curMove];
        for (int next : nextNodes) {
            if (curMove == cat && next == 0) {
                continue;
            }
            int nextMouse = curMove == mouse ? next : mouse;
            int nextCat = curMove == cat ? next : cat;
            int nextResult = getResult(nextMouse, nextCat, turns + 1);
            if (nextResult != defaultResult) {
                result = nextResult;
                if (result != DRAW) {
                    break;
                }
            }
        }
        dp[mouse][cat][turns] = result;
    }
}
```

* [sol1-C#]

```C#
public class Solution {
    const int MOUSE_WIN = 1;
    const int CAT_WIN = 2;
    const int DRAW = 0;
    int n;
    int[][] graph;
    int[,,] dp;

    public int CatMouseGame(int[][] graph) {
        this.n = graph.Length;
        this.graph = graph;
        this.dp = new int[n, n, n * 2];
        for (int i = 0; i < n; i++) {
            for (int j = 0; j < n; j++) {
                for (int k = 0; k < n * 2; k++) {
                    dp[i, j, k] = -1;
                }
            }
        }
        return GetResult(1, 2, 0);
    }

    public int GetResult(int mouse, int cat, int turns) {
        if (turns == n * 2) {
            return DRAW;
        }
        if (dp[mouse, cat, turns] < 0) {
            if (mouse == 0) {
                dp[mouse, cat, turns] = MOUSE_WIN;
            } else if (cat == mouse) {
                dp[mouse, cat, turns] = CAT_WIN;
            } else {
                GetNextResult(mouse, cat, turns);
            }
        }
        return dp[mouse, cat, turns];
    }

    public void GetNextResult(int mouse, int cat, int turns) {
        int curMove = turns % 2 == 0 ? mouse : cat;
        int defaultResult = curMove == mouse ? CAT_WIN : MOUSE_WIN;
        int result = defaultResult;
        int[] nextNodes = graph[curMove];
        foreach (int next in nextNodes) {
            if (curMove == cat && next == 0) {
                continue;
            }
            int nextMouse = curMove == mouse ? next : mouse;
            int nextCat = curMove == cat ? next : cat;
            int nextResult = GetResult(nextMouse, nextCat, turns + 1);
            if (nextResult != defaultResult) {
                result = nextResult;
                if (result != DRAW) {
                    break;
                }
            }
        }
        dp[mouse, cat, turns] = result;
    }
}
```

* [sol1-C++]

```C++
const int MOUSE_WIN = 1;
const int CAT_WIN = 2;
const int DRAW = 0;
const int MAXN = 51;

class Solution {
public:
    int n;
    int dp[MAXN][MAXN][MAXN*2];
    vector<vector<int>> graph;
    
    int catMouseGame(vector<vector<int>>& graph) {
        this->n = graph.size();
        this->graph = graph;
        memset(dp, -1, sizeof(dp));
        return getResult(1, 2, 0);
    }

    int getResult(int mouse, int cat, int turns) {
        if (turns == n * 2) {
            return DRAW;
        }
        if (dp[mouse][cat][turns] < 0) {
            if (mouse == 0) {
                dp[mouse][cat][turns] = MOUSE_WIN;
            } else if (cat == mouse) {
                dp[mouse][cat][turns] = CAT_WIN;
            } else {
                getNextResult(mouse, cat, turns);
            }
        }
        return dp[mouse][cat][turns];
    }

    void getNextResult(int mouse, int cat, int turns) {
        int curMove = turns % 2 == 0 ? mouse : cat;
        int defaultResult = curMove == mouse ? CAT_WIN : MOUSE_WIN;
        int result = defaultResult;
        for (int next : graph[curMove]) {
            if (curMove == cat && next == 0) {
                continue;
            }
            int nextMouse = curMove == mouse ? next : mouse;
            int nextCat = curMove == cat ? next : cat;
            int nextResult = getResult(nextMouse, nextCat, turns + 1);
            if (nextResult != defaultResult) {
                result = nextResult;
                if (result != DRAW) {
                    break;
                }
            }
        }
        dp[mouse][cat][turns] = result;
    }
};
```

* [sol1-C]

```C
#define MOUSE_WIN 1
#define CAT_WIN 2
#define DRAW 0
#define MAXN 51

int dp[MAXN][MAXN][MAXN*2];

int getResult(int mouse, int cat, int turns, const int** graph, const int graphSize, const int* graphColSize) {
    if (turns == graphSize * 2) {
        return DRAW;
    }
    if (dp[mouse][cat][turns] < 0) {
        if (mouse == 0) {
            dp[mouse][cat][turns] = MOUSE_WIN;
        } else if (cat == mouse) {
            dp[mouse][cat][turns] = CAT_WIN;
        } else {
            getNextResult(mouse, cat, turns, graph, graphSize, graphColSize);
        }
    }
    return dp[mouse][cat][turns];
}

void getNextResult(int mouse, int cat, int turns, const int** graph, const int graphSize, const int* graphColSize) {
    int curMove = turns % 2 == 0 ? mouse : cat;
    int defaultResult = curMove == mouse ? CAT_WIN : MOUSE_WIN;
    int result = defaultResult;
    int * nextNodes = graph[curMove];
    for (int i = 0; i < graphColSize[curMove]; i++) {
        if (curMove == cat && nextNodes[i] == 0) {
            continue;
        }
        int nextMouse = curMove == mouse ? nextNodes[i] : mouse;
        int nextCat = curMove == cat ? nextNodes[i] : cat;
        int nextResult = getResult(nextMouse, nextCat, turns + 1, graph, graphSize, graphColSize);
        if (nextResult != defaultResult) {
            result = nextResult;
            if (result != DRAW) {
                break;
            }
        }
    }
    dp[mouse][cat][turns] = result;
}

int catMouseGame(int** graph, int graphSize, int* graphColSize){
    memset(dp, -1, sizeof(dp));
    return getResult(1, 2, 0, graph, graphSize, graphColSize);
}
```

* [sol1-JavaScript]

```JavaScript
const MOUSE_WIN = 1;
const CAT_WIN = 2;
const DRAW = 0;

var catMouseGame = function(graph) {
    this.n = graph.length;
    this.graph = graph;
    this.dp = new Array(n).fill(0).map(() => new Array(n).fill(0).map(() => new Array(n * 2).fill(-1)));
    return getResult(1, 2, 0);
};

const getResult = (mouse, cat, turns) => {
    if (turns === n * 2) {
        return DRAW;
    }
    if (dp[mouse][cat][turns] < 0) {
        if (mouse === 0) {
            dp[mouse][cat][turns] = MOUSE_WIN;
        } else if (cat === mouse) {
            dp[mouse][cat][turns] = CAT_WIN;
        } else {
            getNextResult(mouse, cat, turns);
        }
    }
    return dp[mouse][cat][turns];
}

const getNextResult = (mouse, cat, turns) => {
    const curMove = turns % 2 === 0 ? mouse : cat;
    const defaultResult = curMove == mouse ? CAT_WIN : MOUSE_WIN;
    let result = defaultResult;
    const nextNodes = graph[curMove];
    for (const next of nextNodes) {
        if (curMove === cat && next === 0) {
            continue;
        }
        const nextMouse = curMove == mouse ? next : mouse;
        const nextCat = curMove == cat ? next : cat;
        const nextResult = getResult(nextMouse, nextCat, turns + 1);
        if (nextResult !== defaultResult) {
            result = nextResult;
            if (result !== DRAW) {
                break;
            }
        }
    }
    dp[mouse][cat][turns] = result;
}
```

* [sol1-Golang]

```go
const (
    draw     = 0
    mouseWin = 1
    catWin   = 2
)

func catMouseGame(graph [][]int) int {
    n := len(graph)
    dp := make([][][]int, n)
    for i := range dp {
        dp[i] = make([][]int, n)
        for j := range dp[i] {
            dp[i][j] = make([]int, n*2)
            for k := range dp[i][j] {
                dp[i][j][k] = -1
            }
        }
    }

    var getResult, getNextResult func(int, int, int) int
    getResult = func(mouse, cat, turns int) int {
        if turns == n*2 {
            return draw
        }
        res := dp[mouse][cat][turns]
        if res != -1 {
            return res
        }
        if mouse == 0 {
            res = mouseWin
        } else if cat == mouse {
            res = catWin
        } else {
            res = getNextResult(mouse, cat, turns)
        }
        dp[mouse][cat][turns] = res
        return res
    }
    getNextResult = func(mouse, cat, turns int) int {
        curMove := mouse
        if turns%2 == 1 {
            curMove = cat
        }
        defaultRes := mouseWin
        if curMove == mouse {
            defaultRes = catWin
        }
        res := defaultRes
        for _, next := range graph[curMove] {
            if curMove == cat && next == 0 {
                continue
            }
            nextMouse, nextCat := mouse, cat
            if curMove == mouse {
                nextMouse = next
            } else if curMove == cat {
                nextCat = next
            }
            nextRes := getResult(nextMouse, nextCat, turns+1)
            if nextRes != defaultRes {
                res = nextRes
                if res != draw {
                    break
                }
            }
        }
        return res
    }
    return getResult(1, 2, 0)
}
```

* [sol1-Python3]

```Python
DRAW = 0
MOUSE_WIN = 1
CAT_WIN = 2

class Solution:
    def catMouseGame(self, graph: List[List[int]]) -> int:
        n = len(graph)
        dp = [[[-1] * (n * 2) for _ in range(n)] for _ in range(n)]

        def getResult(mouse: int, cat: int, turns: int) -> int:
            if turns == n * 2:
                return DRAW
            res = dp[mouse][cat][turns]
            if res != -1:
                return res
            if mouse == 0:
                res = MOUSE_WIN
            elif cat == mouse:
                res = CAT_WIN
            else:
                res = getNextResult(mouse, cat, turns)
            dp[mouse][cat][turns] = res
            return res

        def getNextResult(mouse: int, cat: int, turns: int) -> int:
            curMove = mouse if turns % 2 == 0 else cat
            defaultRes = MOUSE_WIN if curMove != mouse else CAT_WIN
            res = defaultRes
            for next in graph[curMove]:
                if curMove == cat and next == 0:
                    continue
                nextMouse = next if curMove == mouse else mouse
                nextCat = next if curMove == cat else cat
                nextRes = getResult(nextMouse, nextCat, turns + 1)
                if nextRes != defaultRes:
                    res = nextRes
                    if res != DRAW:
                        break
            return res

        return getResult(1, 2, 0)
```

**复杂度分析**

- 时间复杂度：$O(n^4)$，其中 $n$ 是图中的节点数。状态数是 $O(n^3)$，对于每个状态需要 $O(n)$ 的时间计算状态值，因此总时间复杂度是 $O(n^4)$。

- 空间复杂度：$O(n^3)$，其中 $n$ 是图中的节点数。三维数组 $\textit{dp}$ 需要 $O(n^3)$ 的空间。

#### 结语

上述方法为自顶向下的动态规划，也称记忆化搜索。这道题也可以使用自底向上的方法求解，从必胜状态与必败状态开始计算初始状态对应的游戏结果，可以通过广度优先搜索或者拓扑排序实现。感兴趣的读者可以自行尝试。
