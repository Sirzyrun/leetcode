## 并查集 + DFS

根据题目定义，我们知道需要统计所有不和「边缘陆地」相连通的「普通陆地」数量。

我们可以用「并查集」来维护连通块，使用 `DFS` 对所有「边缘陆地连通块」进行标记（设定编号为 $0$ 的超级源点，对于所有的「边缘陆地连通块」，将其与超级源点联通）。

具体的，我们按照如下流程进行处理：

* 初始化并查集：起始让每个单元格独立作为一个连通块；
* 使用 `DFS`  标记所有「边缘陆地连通块」：从位于边缘的「边缘陆地」进行出发，将其所在连通块与超级源点 $0$ 进行联通标记（同时为了确保复杂度，我们在进行 `DFS` 前需要先检查当前陆地与超级源点的联通关系，如果已联通，说明当前陆地棣属于之前的某个连通块，已被整体标记过，进行跳过即可）；
* 统计答案：遍历整个棋盘，统计所有不与超级源点 $0$ 联通的陆地数量。

> 一些细节：由于我们人为规定了超级源点编号为 $0$，同时棋盘下标从 $0$ 开始，因此对某个点 $(x, y)$ 的编号，我们需要增加一个偏移量，例如 $idx = x * n + y + 1$。

代码：

* []

```Java
class Solution {
    int N = 550;
    int[] p = new int[N * N];
    int m, n;
    int[][] g;
    int find(int x) {
        if (p[x] != x) p[x] = find(p[x]);
        return p[x];
    }
    boolean query(int a, int b) {
        return find(a) == find(b);
    }
    void union(int a, int b) {
        p[find(a)] = find(b);
    }
    public int numEnclaves(int[][] grid) {
        g = grid;
        m = g.length; n = g[0].length;
        for (int i = 0; i < m; i++) {
            for (int j = 0; j < n; j++) {
                p[getIdx(i, j)] = getIdx(i, j);
            }
        }
        for (int i = 0; i < m; i++) {
            for (int j = 0; j < n; j++) {
                if (i == 0 || j == 0 || i == m - 1 || j == n - 1) {
                    if (g[i][j] != 1 || query(getIdx(i, j), 0)) continue;
                    dfs(i, j);
                }
            }
        }
        int ans = 0;
        for (int i = 0; i < m; i++) {
            for (int j = 0; j < n; j++) {
                if (g[i][j] == 1 && !query(getIdx(i, j), 0)) ans++;
            }
        }
        return ans;
    }
    int[][] dirs = new int[][]{{1,0},{-1,0},{0,1},{0,-1}};
    void dfs(int x, int y) {
        union(getIdx(x, y), 0);
        for (int[] d : dirs) {
            int nx = x + d[0], ny = y + d[1];
            if (nx < 0 || nx >= m || ny < 0 || ny >= n) continue;
            if (g[nx][ny] != 1 || query(getIdx(nx, ny), 0)) continue;
            dfs(nx, ny);
        }
    }
    int getIdx(int x, int y) {
        return x * n + y + 1;
    }
}
```

* 时间复杂度：初始化并查集复杂度为 $O(m * n)$；使用 `DFS` 对边缘陆地连通块进行标记复杂度为 $O(m * n)$；统计答案复杂度为 $O(m * n)$。整体复杂度为 $O(m * n)$
* 空间复杂度：$O(m * n)$

---

## 最后

**如果有帮助到你，请给题解点个赞和收藏，让更多的人看到 ~ ("▔□▔)/**

也欢迎你 [关注我](https://oscimg.oschina.net/oscnet/up-19688dc1af05cf8bdea43b2a863038ab9e5.png) 和 加入我们的[「组队打卡」](https://leetcode-cn.com/u/ac_oier/)小群 ，提供写「证明」&「思路」的高质量题解。

所有题解已经加入 [刷题指南](https://github.com/SharingSource/LogicStack-LeetCode/wiki)，欢迎 star 哦 ~
