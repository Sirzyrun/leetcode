# 解题思路

**前缀树的优点：利用字符串的公共前缀来节约存储空间 $Trie$ 树主要是利用词的公共前缀缩小查词范围、通过状态间的映射关系避免了字符的遍历，从而达到高效检索的目的。**

![1.png](https://pic.leetcode-cn.com/1618368870-HCPTZG-1.png)

> 该前缀树中拥有的字符串分别为：**["$am$", "$bad$", "$be$", "$so$"]**，**若两个字符串有同样的前缀，在插入时，就会省去了相同部分插入的步骤**，直接从不相同的第一个字符开始插入即可。

**$Trie$ 前缀树，就是一个树，第一个枝干上有 $26$ 个分支，代表 $26$ 个字母，每个字母的分支上同样有 $26$ 个分支，顺着枝干往下就能够拼成一个单词。**

- **插入**：每遍历字符串中的一个字母，**若该字母没有出现过**，则就在对应的空位置往下生成一个 $Trie$；**若该字母出现过**，则直接继续遍历下一个字母，直到字符串遍历结束（**注意：结束时要标记为 $end$，表示这个单词已经结束了**）。
  --

- **查找**：遍历要参数中要查找的字符串 $word$，**若还未遍历到 $end$，在某字符处出现了 $null$，则直接返回 $false$**，因为该字符是第一次出现，则一定不会存在这个要查找的单词 $word$。否则，**一直遍历到查找字符串 $word$ 的末尾**，若当前这个位置的 **`isEnd == true`**，表示在前缀树中找到了该单词 word；否则，没有这个单词。
  --

- **前缀匹配**：遍历需要前缀匹配的字符串 $prefix$，**只要有在某字母的位置出现了 $null$，则直接返回 $false$**（**因为，该字母是第一次出现在前缀树中**）；否则，直到 $prefix$ 全部遍历完成后都没有返回 $false$ 的话，则表示当前字典树中有该前缀字符串，返回 $true$ 即可。

> 示例：在上面的前缀树中插入 bed:

> 先遍历字符 ' b '，存在

![微信图片_20210414115349.png](https://pic.leetcode-cn.com/1618372561-bPlbzK-%E5%BE%AE%E4%BF%A1%E5%9B%BE%E7%89%87_20210414115349.png)

> 在 ' b ' 的基础上继续遍历字符 ' e '，存在

![微信图片_20210414115426.png](https://pic.leetcode-cn.com/1618372577-bxbANG-%E5%BE%AE%E4%BF%A1%E5%9B%BE%E7%89%87_20210414115426.png)

> 在前面的基础上遍历字符 ' d '，node.children[c - 'a'] == null（其中字符 c 代表 ' d '），在该空位置上生成一个 Trie

![微信图片_20210414115147.png](https://pic.leetcode-cn.com/1618372591-nMSpsG-%E5%BE%AE%E4%BF%A1%E5%9B%BE%E7%89%87_20210414115147.png)

---

# 代码

* java

```java
class Trie {

    Trie[] children;
    boolean isEnd;

    //初始化
    public Trie() {

        children = new Trie[26];
        isEnd = false;
    }
    
    //插入
    public void insert(String word) {

        Trie node = this;
        for (char c : word.toCharArray()) {

            if (node.children[c - 'a'] == null) {

                node.children[c - 'a'] = new Trie();
            }
            node = node.children[c - 'a'];
        }
        node.isEnd = true;
    }
    
    //查找
    public boolean search(String word) {

        Trie node = this;
        for (char c : word.toCharArray()) {

            if (node.children[c - 'a'] == null) {

                return false;
            }
            node = node.children[c - 'a'];
        }
        return node.isEnd;
    }
    
    //前缀匹配
    public boolean startsWith(String prefix) {

        Trie node = this;
        for (char c : prefix.toCharArray()) {

            if (node.children[c - 'a'] == null) {

                return false;
            }
            node = node.children[c - 'a'];
        }
        return true;
    }
}
```

